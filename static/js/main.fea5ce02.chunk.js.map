{"version":3,"sources":["ContactList/ContactList.module.css","Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","AddForm/AddForm.js","ContactList/ContactList.js","Filter/Filter.js","App.js","index.js","AddForm/AddForm.module.css"],"names":["module","exports","actions","addContact","createAction","data","payload","id","shortid","generate","deleteContact","changeFilter","itemsReducer","createReducer","contactsActions","state","action","find","contact","number","name","toLowerCase","alert","filter","filterReducer","_","combineReducers","items","store","configureStore","reducer","contacts","contactsReducer","devTools","process","connect","dispatch","submitHandler","text","useState","setName","setNumber","inputChange","e","currentTarget","value","className","styles","form","onSubmit","preventDefault","label","input","type","onChange","pattern","title","required","add_btn","allContacts","normalized","includes","getFiltredContacts","onDeleteContact","contact_list","map","delete_btn","onClick","filter_wrapper","filter_label","filter_input","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fea5ce02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__1YYXj\",\"contact\":\"ContactList_contact__5ZWB2\",\"delete_btn\":\"ContactList_delete_btn__ILIBZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_label\":\"Filter_filter_label__3Xodu\",\"filter_wrapper\":\"Filter_filter_wrapper__3y_YR\",\"filter_input\":\"Filter_filter_input__MWDpv\"};","// import types from \"./contacts-types\";\r\nimport shortid from \"shortid\";\r\n\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contacts/add\", (data) => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      ...data,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction(\"contacts/delete\");\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nconst actions = {\r\n  addContact,\r\n  deleteContact,\r\n  changeFilter,\r\n};\r\n\r\nexport default actions;\r\n\r\n//================================vanila redux\r\n// const addContact = (data) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     ...data,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import types from \"./contacts-types\";\r\n\r\nimport contactsActions from \"./contacts-actions\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [contactsActions.addContact]: (state, action) => {\r\n    if (\r\n      state.find(\r\n        (contact) =>\r\n          contact.number === action.payload.number ||\r\n          contact.name.toLowerCase() === action.payload.name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(\"Contact already exist!\");\r\n      return;\r\n    }\r\n    return [action.payload, ...state];\r\n  },\r\n\r\n  [contactsActions.deleteContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n//========================vanila redux\r\n// const itemsReducer = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case types.ADD:\r\n//       if (\r\n//         state.find(\r\n//           (contact) =>\r\n//             contact.number === action.payload.number ||\r\n//             contact.name.toLowerCase() === action.payload.name.toLowerCase()\r\n//         )\r\n//       ) {\r\n//         alert(\"Contact already exist!\");\r\n//         return;\r\n//       }\r\n//       return [action.payload, ...state];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== action.payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case \"contacts/changeFilter\":\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactsActions from \"../redux/contacts/contacts-actions\";\r\nimport styles from \"./AddForm.module.css\";\r\n\r\nfunction AddForm({ submitHandler }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const inputChange = (e) => {\r\n    switch (e.currentTarget.name) {\r\n      case \"name\":\r\n        setName(e.currentTarget.value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(e.currentTarget.value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    submitHandler({ name: name, number: number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={styles.form} onSubmit={formSubmit}>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            onChange={inputChange}\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.form}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={inputChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={styles.add_btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  submitHandler: (text) => dispatch(contactsActions.addContact(text)),\r\n});\r\n\r\n// class AddForm extends React.Component {\r\n//   constructor() {\r\n//     super();\r\n\r\n//     this.state = {\r\n//       name: \"\",\r\n//       number: \"\",\r\n//     };\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     this.setState({\r\n//       [e.currentTarget.name]: e.currentTarget.value, //в значение артибута 'name' у инпута положиди знаение 'value'\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.submitHandler(this.state);\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <form className={styles.form} onSubmit={this.handleSubmit}>\r\n//           <label className={styles.label}>\r\n//             Name\r\n//             <input\r\n//               className={styles.input}\r\n//               type=\"text\"\r\n//               onChange={this.handleChange}\r\n//               name=\"name\"\r\n//               value={this.state.name}\r\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//               required\r\n//             />\r\n//           </label>\r\n\r\n//           <label className={styles.form}>\r\n//             Number\r\n//             <input\r\n//               className={styles.input}\r\n//               type=\"tel\"\r\n//               name=\"number\"\r\n//               value={this.state.number}\r\n//               onChange={this.handleChange}\r\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//               required\r\n//             />\r\n//           </label>\r\n\r\n//           <button type=\"submit\" className={styles.add_btn}>\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default connect(null, mapDispatchToProps)(AddForm);\r\n","import { connect } from \"react-redux\";\r\n\r\nimport contactsActions from \"../redux/contacts/contacts-actions\";\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={styles.contact_list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.contact}>\r\n          <p>\r\n            {name}: <span>{number}</span>\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.delete_btn}\r\n            onClick={() => {\r\n              onDeleteContact(id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst getFiltredContacts = (allContacts, filter) => {\r\n  const normalized = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalized)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const visibleContacts = getFiltredContacts(\r\n    state.contacts.items,\r\n    state.contacts.filter\r\n  );\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from \"react-redux\";\r\n\r\nimport styles from \"./Filter.module.css\";\r\nimport contactsActions from \"../redux/contacts/contacts-actions\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <div className={styles.filter_wrapper}>\r\n      <label className={styles.filter_label}>\r\n        Find contact by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          className={styles.filter_input}\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) =>\r\n    dispatch(contactsActions.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import React, { useState, useEffect } from \"react\";\r\n// import shortid from \"shortid\";\r\nimport AddForm from \"./AddForm/AddForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\n\r\nimport \"./index.css\";\r\n\r\nfunction App() {\r\n  // useEffect(() => {\r\n  //   // localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  //   const parsedData = JSON.parse(localStorage.getItem(\"contacts\"));\r\n  //   if (parsedData) {\r\n  //     setContacts(parsedData);\r\n  //   } else {\r\n  //     return;\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  // });\r\n\r\n  return (\r\n    <div>\r\n      <AddForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// class App extends React.Component {\r\n//   constructor() {\r\n//     super();\r\n\r\n//     this.state = {\r\n//       contacts: [\r\n//         { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//         { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//         { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//         { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n//       ],\r\n//       filter: \"\",\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const parsedData = JSON.parse(localStorage.getItem(\"contacts\"));\r\n//     if (parsedData) {\r\n//       this.setState({ contacts: parsedData });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   formSubmitHandler = (data) => {\r\n//     //data - объект, состоящий из имени номера, которые прокинули из формы.\r\n//     let newContact = {\r\n//       id: shortid.generate(),\r\n//       ...data,\r\n//     };\r\n\r\n//     if (\r\n//       this.state.contacts.find(\r\n//         (contact) =>\r\n//           contact.number === data.number ||\r\n//           contact.name.toLowerCase() === data.name.toLowerCase()\r\n//       )\r\n//     ) {\r\n//       alert(\"Contact already exist!\");\r\n//       return;\r\n//     }\r\n\r\n//     this.setState((prevState) => ({\r\n//       contacts: [newContact, ...prevState.contacts],\r\n//     }));\r\n//   };\r\n\r\n//   deleteContact = (contactId) => {\r\n//     this.setState((prevState) => ({\r\n//       contacts: prevState.contacts.filter(\r\n//         (contact) => contact.id !== contactId\r\n//       ),\r\n//     }));\r\n//   };\r\n\r\n//   filterChange = (e) => {\r\n//     this.setState({ filter: e.currentTarget.value });\r\n//   };\r\n\r\n//   getFiltredContacts = () => {\r\n//     const normalized = this.state.filter.toLowerCase();\r\n\r\n//     return this.state.contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalized)\r\n//     );\r\n//   };\r\n\r\n//   render() {\r\n//     let filtredContacts = this.getFiltredContacts();\r\n//     return (\r\n//       <div>\r\n//         <AddForm submitHandler={this.formSubmitHandler} />\r\n//         <Filter value={this.state.filter} onChange={this.filterChange} />\r\n//         <ContactList\r\n//           contacts={filtredContacts}\r\n//           onDeleteContact={this.deleteContact}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport { App };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"./redux/store\";\r\nimport { App } from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddForm_form__ZPUci\",\"add_btn\":\"AddForm_add_btn__1v2Zo\",\"label\":\"AddForm_label__YO3or\",\"input\":\"AddForm_input__27mbk\"};"],"sourceRoot":""}